help("plot")
help.start()
a <- 5
a
help.search("lm")
<F1>
clear
help("plot")
help.search("lm")
?serialize
rm(list = ls())
rm
a -> 4
a<- 6
a
rm(list = ls())
ls
numeric(4)
class(a)
a <- "onur"
class(a)
type(a)
numeric(a)
rm(a)
a <- "onur"
rm(a)
x <- matrix(1:4,2,2)
y <- matrix(rep(10,4),2,2)
x
y
rep(10,4)
class(rep(10,4))
class(matrix(1,1,1))
?matrix
x<-rnorm(9)
lev<-gl(3,3,labels = c("Ocak","Subat","Mart"))
lev
class(gl())
class(gl)
gl(3,2,labels = c("Ocak","Subat","Mart"))
grps<-split(x,lev)
grps
class?
a
class(grps)
sapply(grps,function(x),sum(abs(x)))
> sapply(grps,function(x) sum(abs(x)))
> sapply(grps,function(x).sum(abs(x)))
sapply(grps,function(x) sum(abs(x)))
installed.packages("rjson")
install.packages("rjson")
a<-fromJSON("https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
a-<jsonlite::fromJSON("https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
a<-fromJSON("https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
a<-jsonlite::fromJSON("https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
a<-fromJSON(file="https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
library("rjson")
rjson
install.packages("httr")
library(httr)
a<-GET("https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
a
l <- lappy(a)
l <- lapply(a)
l <- sapply(a)
install.packages("json")
jfile<-json.loads(a)
a[1]
a[2]
a[3]
a[4]
a
a[5]
a[6]
a[7]
a[8]
a[9]
a[10]
a[11]
a[12]
# Load the package
# required to read JSON files.
library("rjson")
# Passing argument files
myData <- fromJSON(file="data.json")
# Load the package
# required to read JSON files.
library("rjson")
# Passing argument files
myData <- fromJSON(file="https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
print(json_data_frame)
a[1]
a[2]
a[2]
a[3]
a
myData
# jsonlite paketini yükle
install.packages("jsonlite")
library(jsonlite)
# JSON dosyasını oku
json_data <- fromJSON("https://raw.githubusercontent.com/COMU-BLM4022/Exercises/main/Week4/Exercise1/example_2.json")
# Veri çerçevesine dönüştür
myData_df <- as.data.frame(json_data)
# Veri çerçevesini görüntüle
print(myData_df)
myData$quiz[1]
myData$quiz
for i in myData_df{}
for i in myData_df{}
for i in myData_df{i$answer}
for i in myData_df{print(i$quiz)}
for i in myData_df{print(i)}
print(myData_df)
sapply(myData_df$maths,function(s) s$options[1])
a<-sapply(myData_df$maths,function(s) s$options[1])
print(a)
a<-sapply(myData_df$maths,function(myData_df) myData_df$options[1])
sapply(myData_df$maths,function(myData_df) myData_df$options[1])
sapply(myData_df$maths,function(myData_df) myData_df$options[1])
sapply(myData$maths,function(myData_df) myData_df$options[1])
df <-read_excel("C:\Users\Onur\Desktop\Veri Detayları21.03.2024 16_34_27.xlsx")
df <-read_excel("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
install.packages("readxl")
print(df)
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
df<-read_excel("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
df<-system.file("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
# havaK <- <kodu tamamla>
library(readxl)
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
havaK
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_excel("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
havaK
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
havaK
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
havaK[:10]
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
havaK.columns
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx")
havaK
# Excel dosyasındaki ham verileri data.frame formatında R'a ithal edin
# havaK <- <kodu tamamla>
havaK <- read_xlsx("C:\\Users\\Onur\\Desktop\\Veri Detayları21.03.2024 16_34_27.xlsx",skip=1)
havaK
# havaK <- <kodu tamamla>
colnames(havaK)[1]<-'Time'
havaK
havaK
# havaK <- <kodu tamamla>
colnames(havaK)[1]<-'Time'
havaK
# havaK <- <kodu tamamla>
colnames(havaK)[1]<-'Time'
havaK[-which(names(havaK) == "Time")] <- lapply(havaK[-which(names(havaK) == "Time")], function(x) {
# Sayısal olmayan karakterleri ve boşlukları temizle
x <- gsub("[^0-9,]", "", x)
# Ondalık ayırıcıları noktaya çevir
x <- gsub(",", ".", x)
# Sayısal değerlere dönüştür
as.numeric(x)
})
head(havaK, 10)
havaK
# havaK <- <kodu tamamla>
plot_ly(data, x = ~Time) %>%
add_lines(y = ~PM10, name = "PM10 (µg/m³)", color = I("blue")) %>%
add_lines(y = ~PM2.5, name = "PM2.5 (µg/m³)", color = I("red")) %>%
layout(title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
# havaK <- <kodu tamamla>
plot_ly(data, x = Time) %>%
add_lines(y = PM10, name = "PM10 (µg/m³)", color = I("blue")) %>%
add_lines(y = PM2.5, name = "PM2.5 (µg/m³)", color = I("red")) %>%
layout(title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
library(plotly)
install.packages("plotly")
library(plotly)
# havaK <- <kodu tamamla>
plot_ly(data, x = Time) %>%
add_lines(y = PM10, name = "PM10 (µg/m³)", color = I("blue")) %>%
add_lines(y = PM2.5, name = "PM2.5 (µg/m³)", color = I("red")) %>%
layout(title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
# havaK <- <kodu tamamla>
plot_ly(data, x = Time) %>%
add_lines(y = PM10, name = "PM10 (µg/m³)", color = I("blue")) %>%
add_lines(y = PM2.5, name = "PM2.5 (µg/m³)", color = I("red")) %>%
layout(title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
# havaK <- <kodu tamamla>
plot_ly(havaK, x = Time) %>%
add_lines(y = PM10, name = "PM10 (µg/m³)", color = I("blue")) %>%
add_lines(y = PM2.5, name = "PM2.5 (µg/m³)", color = I("red")) %>%
layout(title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
# havaK <- <kodu tamamla>
# Plotly ile çizim
plot_data <- plot_ly(havaK, x = ~Time)  # Veriyi plotly nesnesine dönüştür
plot_data <- add_lines(plot_data, y = ~PM10, name = "PM10 (µg/m³)", color = I("blue"))  # PM10 çizgisini ekle
plot_data <- add_lines(plot_data, y = ~PM2.5, name = "PM2.5 (µg/m³)", color = I("red"))  # PM2.5 çizgisini ekle
# Grafik düzeni ayarla
plot_data <- layout(plot_data,
title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
plot_data  # Grafik çizimini görüntüle
# havaK <- <kodu tamamla>
# Plotly ile çizim
plot_data <- plot_ly(havaK, x = ~Time)  # Veriyi plotly nesnesine dönüştür
plot_data <- add_lines(plot_data, y = ~PM10 ( µg/m3 ), name = "PM10 (µg/m³)", color = I("blue"))  # PM10 çizgisini ekle
plot_data <- add_lines(plot_data, y = ~PM 2.5 ( µg/m3 ), name = "PM2.5 (µg/m³)", color = I("red"))  # PM2.5 çizgisini ekle
# havaK <- <kodu tamamla>
# Plotly ile çizim
plot_data <- plot_ly(havaK, x = ~Time)  # Veriyi plotly nesnesine dönüştür
plot_data <- add_lines(plot_data, y = ~PM10µg/m3, name = "PM10 (µg/m³)", color = I("blue"))  # PM10 çizgisini ekle
plot_data <- add_lines(plot_data, y = ~PM25µg/m3, name = "PM2.5 (µg/m³)", color = I("red"))  # PM2.5 çizgisini ekle
# Grafik düzeni ayarla
plot_data <- layout(plot_data,
title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
plot_data  # Grafik çizimini görüntüle
# havaK <- <kodu tamamla>
names(havaK) <- gsub("\\s+|µ|/","",names(havaK),perl=TRUE)
# Plotly ile çizim
plot_data <- plot_ly(havaK, x = ~Time)  # Veriyi plotly nesnesine dönüştür
plot_data <- add_lines(plot_data, y = ~PM10µg/m3, name = "PM10 (µg/m³)", color = I("blue"))  # PM10 çizgisini ekle
plot_data <- add_lines(plot_data, y = ~PM25µg/m3, name = "PM2.5 (µg/m³)", color = I("red"))  # PM2.5 çizgisini ekle
# Grafik düzeni ayarla
plot_data <- layout(plot_data,
title = "PM10 ve PM2.5 Değerleri",
xaxis = list(title = "Zaman"),
yaxis = list(title = "Değer (µg/m³)"))
plot_data  # Grafik çizimini görüntüle
# havaK <- <kodu tamamla>
# Rename columns to remove special characters
colnames(havaK) <- c("Time", "PM10", "PM2.5", "SO2", "NO2", "NOX", "NO", "O3")
# Convert 'Time' column to POSIXct format
havaK$Time <- as.POSIXct(havaK$Time)
# Convert other columns to numeric, replacing commas with dots
havaK[-1] <- lapply(havaK[-1], function(x) as.numeric(gsub(",", ".", x)))
# Plot the data
plot_ly(havaK, x = ~Time) %>%
add_lines(y = ~PM10, name = "PM10 (µg/m³)", color = I("blue")) %>%
add_lines(y = ~PM2.5, name = "PM2.5 (µg/m³)", color = I("red")) %>%
layout(title = "PM10 and PM2.5 Values",
xaxis = list(title = "Time"),
yaxis = list(title = "Value (µg/m³)"))
gitstatus
git status
